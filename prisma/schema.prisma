// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model expenses {
  id         Int        @id @default(autoincrement())
  amount     Int
  category   categories @default(Any)
  date       DateTime   @default(now())
  notes      String?
  created_at DateTime   @default(now())
  User       User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?

  @@index([id, user_id, date])
}

enum incomeCategories {
  Salary
  Freelancing
  Investments
  Interest
  Gift
  Others
}

enum categories {
  Any
  Food
  Transport
  Bills
  Entertainment
  EMI
  Investments
  Debt
  Health
  Shopping
  Education
  Groceries
  Rent
  Insurance
  PersonalCare
  Subscriptions
  Gifts
  Taxes
  Miscellaneous
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  expenses      expenses[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  incomes       Income[]
}

model Income {
  id          String           @id @default(cuid())
  amount      Float
  isRecurring Boolean          @default(false)
  category    incomeCategories @default(Others)
  notes       String?
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  date        DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
